<!DOCTYPE html>
<!--[if lt IE 7 ]> <html lang="en" class="no-js ie6"> <![endif]-->
<!--[if IE 7 ]> <html lang="en" class="no-js ie7"> <![endif]-->
<!--[if IE 8 ]> <html lang="en" class="no-js ie8"> <![endif]-->
<!--[if IE 9 ]> <html lang="en" class="no-js ie9"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!-->
<html style="" class=" js no-touch csstransforms3d csstransitions" lang="en"><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Node.js Interview Questions</title>
<meta name="description" content="Node.js Interview Questions - Learn Node.js framework in simple and easy steps starting from Introduction, Environment Setup, Node Package Manager, Node Callbacks Concept, Node Buffers Module, Node Streams, Node File System, Node Utility Modules, Node Web Module, Node Express Application, Node RESTFul API, Node Scaling Application">
<meta name="keywords" content="Introduction, Environment Setup, Node Package Manager, Global vs Local Installation, Node Callbacks Concept, locking vs non-blocking Code, Event Driven Programming, Event Loop Overview, Event Emitters, Implementing Callbacks, Node Buffers Module,JSON to JS Objects, JS Objects to JSON, Buffer Objects, Node Streams, Reading Stream, Writing Stream, Piping Stream, Node File System, File System Module, Synchronous vs Asynchronous Node, Utility Modules,Node Console Module, Node Process Module, Node OS Module, Node Path Module, Node Net Module, Node DNS Module, Node Domain Module, Node Web Module,HTTP Servers with Node.js, HTTP Clients with Node.js, Node Express Application, Express Overview, Installing Express, Express Generator, Node RESTFul API, Node Scaling Application,The exec function,The spawn function,The fork function">
<!-- base href="https://www.tutorialspoint.com/" -->
<link rel="shortcut icon" href="https://www.tutorialspoint.com/favicon.ico" type="image/x-icon">
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta property="og:locale" content="en_US">
<meta property="og:type" content="website">
<meta property="fb:app_id" content="471319149685276">
<meta property="og:site_name" content="www.tutorialspoint.com">
<meta name="robots" content="index, follow">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="author" content="tutorialspoint.com">
<script src="Node.js%20IQ%20tutorialpoint_files/ca-pub-7133395778201029.js"></script><script src="Node.js%20IQ%20tutorialpoint_files/ca-pub-7133395778201029.js"></script><script type="text/javascript" src="Node.js%20IQ%20tutorialpoint_files/script-min-v4.js"></script>
<link rel="stylesheet" href="Node.js%20IQ%20tutorialpoint_files/style-min.css">
<!-- Head Libs -->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="/theme/css/ie8.css">
<![endif]-->
<style>
pre.prettyprint.tryit {min-height:37px; background: #eee url(/nodejs/images/try-it.jpg) top right no-repeat !important}select{ border:0 !important; outline: 1px inset black !important; outline-offset: -1px !important; }
ul.nav-list.primary>li a.videolink{    background: none; margin: 0px; padding: 0px; border: 1px solid #d6d6d6;}
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, div.footer-copyright { background: #82af25 url(/images/pattern.png) repeat center center !important;}
.sub-main-menu .sub-menuu div:hover, .sub-main-menu .viewall, header nav ul.nav-main li a:hover, button.btn-responsive-nav, header div.search button.btn-default { background: #82af25 !important;}
.submenu-item{ border-bottom: 2px solid #82af25 !important; border-top: 2px solid #82af25 !important }
.ace_scroller{overflow: auto!important;}
</style>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
</head>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img src="Node.js%20IQ%20tutorialpoint_files/loading-cg.gif" alt="" width="70" height="70">
   </div>
</div>
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="https://www.tutorialspoint.com/index.htm" title="tutorialspoint">
      <img alt="tutorialspoint" src="Node.js%20IQ%20tutorialpoint_files/logo.png">
      </a>
      </h1>			
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a href="https://www.tutorialspoint.com/about/about_careers.htm" style="background: #fffb09; font-weight: bold;"><i class="icon icon-suitcase"></i> Jobs</a></li>
            <li> <a href="http://www.sendfiles.net/"><i class="fa fa-send"></i> &nbsp;SENDFiles</a> </li>
            <li> <a href="https://www.tutorialspoint.com/whiteboard.htm"><img src="Node.js%20IQ%20tutorialpoint_files/image-editor.png" alt="Whiteboard" title="Whiteboard"> &nbsp;Whiteboard</a> </li>
            <li> <a href="https://www.tutorialspoint.com/netmeeting.php"><i class="fa-camera"></i> &nbsp;Net Meeting</a> </li>
            <li> <a href="https://www.tutorialspoint.com/online_dev_tools.htm"> <i class="dev-tools-menu" style="opacity:.5"></i> Tools </a> </li>
            <li> <a href="https://www.tutorialspoint.com/articles/index.php"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>            
            <li class="top-icons">
              <ul class="social-icons">
              <li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
              <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
              <li class="twitter"><a href="https://www.twitter.com/tutorialspoint" target="_blank" data-placement="bottom" title="tutorialspoint @ Twitter">Twitter</a></li>
              <li class="linkedin"><a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" data-placement="bottom" title="tutorialspoint @ Linkedin">Linkedin</a></li>
              <li class="youtube"><a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" data-placement="bottom" title="tutorialspoint YouTube">YouTube</a></li>
              </ul>
           </li>
         </ul>
      </nav>
         <!-- search code here  --> 
      <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull" style="top: 1187px!important"> <i class="icon icon-bars"></i> </button>
   </div>
  
   <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown no-sub-menu"> <a class="dropdown" href="https://www.tutorialspoint.com/index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown" id="liTL"><a class="dropdown" href="javascript:void(0);"><span class="tut-lib"> Tutorials Library <i class="fa-caret-down"></i></span></a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://www.tutorialspoint.com/codingground.htm"><i class="fa-code"></i> Coding Ground </a> </li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://www.tutorialspoint.com/tutor_connect/index.php"><i class="fa-user"> </i> Tutor Connect</a></li>
               <li class="dropdown no-sub-menu"><a class="dropdown" href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fa-toggle-right"></i> Videos </a></li>
               <li class="dropdown no-sub-menu">
                  <div class="searchform-popup">
                     <input class="header-search-box" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off" type="text">
                     <div class="magnifying-glass"><i class="icon-search"></i> Search </div>
                 </div>
               </li>
            </ul>
         </nav>
         <div class="submenu-item sub-main-menu" id="top-sub-menu"></div>
         
      </div>
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<div class="mini-logo">
<img src="Node.js%20IQ%20tutorialpoint_files/nodejs-mini-logo.jpg" alt="Node.js Tutorial">
</div>
<ul class="nav nav-list primary left-menu">
<li><a class="videolink" href="https://www.tutorialspoint.com/nodejs_online_training/index.asp" target="_blank"><img src="Node.js%20IQ%20tutorialpoint_files/nodejs-video-tutorials.jpg" alt="Node.js Video Tutorials"></a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">Node.js Tutorial</li>
<li><a href="https://www.tutorialspoint.com/nodejs/index.htm">Node.js - Home</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_introduction.htm">Node.js - Introduction</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_environment_setup.htm">Node.js - Environment Setup</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_first_application.htm">Node.js - First Application</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_repl_terminal.htm">Node.js - REPL Terminal</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_npm.htm">Node.js - Package Manager (NPM)</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_callbacks_concept.htm">Node.js - Callbacks Concept</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_event_loop.htm">Node.js - Event Loop</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_event_emitter.htm">Node.js - Event Emitter</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_buffers.htm">Node.js - Buffers</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_streams.htm">Node.js - Streams</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_file_system.htm">Node.js - File System</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_global_objects.htm">Node.js - Global Objects</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_utility_module.htm">Node.js - Utility Modules</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_web_module.htm">Node.js - Web Module</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_express_framework.htm">Node.js - Express Framework</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_restful_api.htm">Node.js - RESTFul API</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_scaling_application.htm">Node.js - Scaling Application</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_packaging.htm">Node.js - Packaging</a></li>
<li class="heading">Node.js Useful Resources</li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_quick_guide.htm">Node.js - Quick Guide</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_useful_resources.htm">Node.js - Useful Resources</a></li>
<li><a href="https://www.tutorialspoint.com/nodejs/nodejs_discussion.htm">Node.js - Dicussion</a></li>
</ul>
<ul class="nav nav-list primary push-bottom left-menu special">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="https://www.tutorialspoint.com/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="https://www.tutorialspoint.com/computer_whoiswho.htm">Who is Who</a></li>
</ul>
 </aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>Node.js - Interview Questions</h1>
<hr>
<div class="topgooglead">
<div class="topadtag">Advertisements</div>
<script async="" src="Node.js%20IQ%20tutorialpoint_files/adsbygoogle.js"></script>
<ins class="adsbygoogle top_ad_slot" style="display: inline-block; width: 468px; height: 60px;" data-ad-client="ca-pub-7133395778201029" data-ad-slot="2813390526" data-adsbygoogle-status="done"><ins id="aswift_1_expand" style="display:inline-table;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px;background-color:transparent;"><ins id="aswift_1_anchor" style="display:block;border:none;height:60px;margin:0;padding:0;position:relative;visibility:visible;width:468px;background-color:transparent;"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;width:468px;height:60px;" width="468" height="60" frameborder="0"></iframe></ins></ins></ins>
<script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
</div>
<hr>
<div class="pre-btn">
<a href="https://www.tutorialspoint.com/nodejs/nodejs_questions_answers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="https://www.tutorialspoint.com/nodejs/nodejs_questions_answers.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr>
<p>Dear readers, these <b>Node.JS Interview Questions</b> have been 
designed specially to get you acquainted with the nature of questions 
you may encounter during your interview for the subject of <b>Node.JS</b>.
 As per my experience good interviewers hardly plan to ask any 
particular question during your interview, normally questions start with
 some basic concept of the subject and later they continue based on 
further discussion and what you answer:</p>
<section class="toggle active">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is Node.js?</label>
<div class="toggle-content" style="display: block;">
<p> Node.js is a web application framework built on Google Chrome's JavaScript Engine(V8 Engine).</p>
<p> Node.js comes with  runtime environment on which a Javascript based 
script can be interpreted and executed (It is analogus to JVM to JAVA 
byte code). This runtime allows to execute a JavaScript code on any 
machine outside a browser. Because of this runtime of Node.js, 
JavaScript is now can be executed on server as well.</p>
<p> Node.js also provides a rich library of various javascript modules 
which eases the developement of web application using Node.js to great 
extents.</p>
<p></p><center>Node.js = Runtime Environment + JavaScript Library</center><p></p>
</div>
</section>
<section class="toggle active">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What do you mean by Asynchronous API? </label>
<div class="toggle-content" style="display: block;">
<p> All APIs of Node.js library are aynchronous that is non-blocking. It
 essentially means a Node.js based server never waits for a API to 
return data. Server moves to next API after calling it and a 
notification mechanism of Events of Node.js helps server to get response
 from the previous API call. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What are the benefits of using Node.js? </label>
<div class="toggle-content">
<p> Following are main benefits of using Node.js </p>
<ul class="list">
<li><p><b>Aynchronous and Event Driven</b>All APIs of Node.js library 
are aynchronous that is non-blocking. It essentially means a Node.js 
based server never waits for a API to return data. Server moves to next 
API after calling it and a notification mechanism of Events of Node.js 
helps server to get response from the previous API call.</p></li>
<li><p><b>Very Fast</b> Being built on Google Chrome's V8 JavaScript Engine, Node.js library is very fast in code execution.</p></li>
<li><p><b>Single Threaded but highly Scalable</b> - Node.js uses a 
single threaded model with event looping. Event mechanism helps server 
to respond in a non-bloking ways and makes server highly scalable as 
opposed to traditional servers which create limited threads to handle 
requests. Node.js uses a single threaded program and same program can 
services much larger number of requests than traditional server like 
Apache HTTP Server.</p></li>
<li><p><b>No Buffering</b> - Node.js applications never buffer any data. These applications simply output the data in chunks.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> Is it free to use Node.js? </label>
<div class="toggle-content">
<p> Yes! Node.js is released under the <a href="https://raw.githubusercontent.com/joyent/node/v0.12.0/LICENSE">MIT license</a> and is free to use. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> Is Node a single threaded application? </label>
<div class="toggle-content">
<p> Yes! Node uses a single threaded model with event looping. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is REPL in context of Node? </label>
<div class="toggle-content">
<p>REPL stands for Read Eval Print Loop and it represents a computer 
environment like a window console or unix/linux shell where a command is
 entered and system responds with an output. Node.js or Node comes 
bundled with a REPL environment. It performs the following desired 
tasks.</p>
<ul class="list">
<li><p><b>Read</b> - Reads user's input, parse the input into JavaScript data-structure and stores in memory.</p></li>
<li><p><b>Eval</b> - Takes and evaluates the data structure</p></li>
<li><p><b>Print</b> - Prints the result</p></li>
<li><p><b>Loop</b> - Loops the above command until user press ctrl-c twice.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> Can we evaluate simple expression using Node REPL </label>
<div class="toggle-content">
<p> Yes. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is the difference of using var and not using var in REPL while dealing with variables? </label>
<div class="toggle-content">
<p>Use variables to store values and print later. if var keyword is not 
used then value is stored in the variable and printed. Wheras if var 
keyword is used then value is stored but not printed. You can use both 
variables later.</p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is the use of Underscore variable in REPL? </label>
<div class="toggle-content">
<p>Use <b>_</b> to get the last result.</p>
<pre class="result notranslate">C:\Nodejs_WorkSpace&gt;node
&gt; var x = 10
undefined
&gt; var y = 20
undefined
&gt; x + y
30
&gt; var sum = _
undefined
&gt; console.log(sum)
30
undefined
&gt;
</pre>
</div>
</section>
<section class="toggle active">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is npm? </label>
<div class="toggle-content" style="display: block;">
<p>npm stands for Node Package Manager. npm provides following two main functionalities:</p>
<ul class="list">
<li><p>Online repositories for node.js packages/modules which are searchable on <a href="http://search.nodejs.org/" alt="node js repositories">search.nodejs.org</a></p></li>
<li><p>Command line utility to install packages, do version management and dependency management of  Node.js packages.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is global installation of dependencies? </label>
<div class="toggle-content">
<p>Globally installed packages/dependencies are stored in <b>&lt;user-directory&gt;</b>/npm
 directory. Such dependencies can be used in CLI (Command Line 
Interface) function of any node.js but can not be imported using 
require() in Node application directly. To install a Node project 
globally use -g flag.</p>
<pre class="result notranslate">C:\Nodejs_WorkSpace&gt;npm install express -g
</pre>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is local installation of dependencies? </label>
<div class="toggle-content">
<p>By default, npm installs any dependency in the local mode. Here local
 mode refers to the package installation in node_modules directory lying
 in the folder where Node application is present. Locally deployed 
packages are accessible via require(). To install a Node project locally
 following is the syntax.</p>
<pre class="result notranslate">C:\Nodejs_WorkSpace&gt;npm install express
</pre>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How to check the already installed dependencies which are globally installed using npm? </label>
<div class="toggle-content">
<p> Use the following command: </p>
<pre class="result notranslate">C:\Nodejs_WorkSpace&gt;npm ls -g
</pre>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is Package.json? </label>
<div class="toggle-content">
<p>package.json is present in the root directory of any Node application/module and is used to define the properties of a package.</p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> Name some of the attributes of package.json? </label>
<div class="toggle-content">
<p>Following are the attributes of Package.json</p>
<ul class="list">
<li><p><b>name</b> - name of the package</p></li>
<li><p><b>version</b> - version of the package</p></li>
<li><p><b>description</b> - description of the package</p></li>
<li><p><b>homepage</b> - homepage of the package</p></li>
<li><p><b>author</b> - author of the package</p></li>
<li><p><b>contributors</b> - name of the contributors to the package</p></li>
<li><p><b>dependencies</b> - list of dependencies. npm automatically 
installs all the dependencies mentioned here in the node_module folder 
of the package.</p></li>
<li><p><b>repository</b> - repository type and url of the package</p></li>
<li><p><b>main</b> - entry point of the package</p></li>
<li><p><b>keywords</b> - keywords</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How to uninstall a dependency using npm? </label>
<div class="toggle-content">
<p>Use following command to uninstall a module.</p>
<pre class="result notranslate">C:\Nodejs_WorkSpace&gt;npm uninstall dependency-name
</pre>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How to update a dependency using npm? </label>
<div class="toggle-content">
<p>Update package.json and change the version of the dependency which to be updated and run the following command.</p>
<pre class="result notranslate">C:\Nodejs_WorkSpace&gt;npm update
</pre>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is Callback? </label>
<div class="toggle-content">
<p>Callback is an asynchronous equivalent for a function. A callback 
function is called at the completion of a given task. Node makes heavy 
use of callbacks. All APIs of Node are written is such a way that they 
supports callbacks. For example, a function to read a file may start 
reading file and return the control to execution environment immidiately
 so that next instruction can be executed. Once file I/O is complete, it
 will call the callback function while passing the callback function, 
the content of the file as parameter. So there is no blocking or wait 
for File I/O. This makes Node.js highly scalable, as it can process high
 number of request without waiting for any function to return result.</p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is a blocking code? </label>
<div class="toggle-content">
<p> If application has to wait for some I/O operation in order to 
complete its execution any further then the code responsible for waiting
 is known as blocking code. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How Node prevents blocking code? </label>
<div class="toggle-content">
<p> By providing callback function. Callback function gets called whenever corresponding event triggered. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is Event Loop? </label>
<div class="toggle-content">
<p>Node js is a single threaded application but it support concurrency 
via concept of event and callbacks. As every API of Node js are 
asynchronous and being a single thread, it uses async function calls to 
maintain the concurrency. Node uses observer pattern. Node thread keeps 
an event loop and whenever any task get completed, it fires the 
corresponding event which signals the event listener function to get 
executed.</p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is Event Emmitter? </label>
<div class="toggle-content">
<p>EventEmitter class lies in <b>events</b> module. It is accessibly via following syntax:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="com">//import events module</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> events </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">(</span><span class="str">'events'</span><span class="pun">);</span><span class="pln">
</span><span class="com">//create an eventEmitter object</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> eventEmitter </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> events</span><span class="pun">.</span><span class="typ">EventEmitter</span><span class="pun">();</span></pre>
<p>When an EventEmitter instance faces any error, it emits an 'error' 
event. When new listener is added, 'newListener' event is fired and when
 a listener is removed, 'removeListener' event is fired.</p>
<p>EventEmitter provides multiple properties like <b>on</b> and <b>emit</b>. <b>on</b> property is used to bind a function with the event and <b>emit</b> is used to fire an event.</p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is purpose of Buffer class in Node? </label>
<div class="toggle-content">
<p>Buffer class is a global class and can be accessed in application 
without importing buffer module. A Buffer is a kind of an array of 
integers and corresponds to a raw memory allocation outside the V8 heap.
 A Buffer cannot be resized.</p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is Piping in Node? </label>
<div class="toggle-content">
<p>Piping is a mechanism to connect output of one stream to another 
stream. It is normally used to get data from one stream and to pass 
output of that stream to another stream. There is no limit on piping 
operations. Consider the above example, where we've read test.txt using 
readerStream and write test1.txt using writerStream. Now we'll use the 
piping to simplify our operation or reading from one file and writing to
 another file.</p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> Which module is used for file based operations? </label>
<div class="toggle-content">
<p> fs module is used for file based operations.</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="kwd">var</span><span class="pln"> fs </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">(</span><span class="str">"fs"</span><span class="pun">)</span></pre>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> Which module is used for buffer based operations? </label>
<div class="toggle-content">
<p> buffer module is used for buffer based operations.</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="kwd">var</span><span class="pln"> buffer </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">(</span><span class="str">"buffer"</span><span class="pun">)</span></pre>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> Which module is used for web based operations? </label>
<div class="toggle-content">
<p> http module is used for web based operations.</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="kwd">var</span><span class="pln"> http </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">require</span><span class="pun">(</span><span class="str">"http"</span><span class="pun">)</span></pre>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> fs module provides both synchronous as well as asynchronous methods.</label>
<div class="toggle-content">
<p> true. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is difference between synchronous and asynchronous method of fs module?  </label>
<div class="toggle-content">
<p>Every method in fs module have synchronous as well as asynchronous 
form. Asynchronous methods takes a last parameter as completion function
 callback and first parameter of the callback function is error. It is 
preferred to use asynchronous method instead of synchronous method as 
former never block the program execution where the latter one does.</p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> Name some of the flags used in read/write operation on files. </label>
<div class="toggle-content">
<p>flags for read/write operations are following:</p>
<ul class="list">
<li><p><b>r</b> - Open file for reading. An exception occurs if the file does not exist.</p></li>
<li><p><b>r+</b> - Open file for reading and writing. An exception occurs if the file does not exist.</p></li>
<li><p><b>rs</b> - Open file for reading in synchronous mode. Instructs 
the operating system to bypass the local file system cache. This is 
primarily useful for opening files on NFS mounts as it allows you to 
skip the potentially stale local cache. It has a very real impact on I/O
 performance so don't use this flag unless you need it. Note that this 
doesn't turn fs.open() into a synchronous blocking call. If that's what 
you want then you should be using fs.openSync()</p></li>
<li><p><b>rs+</b> - Open file for reading and writing, telling the OS to open it synchronously. See notes for 'rs' about using this with caution.</p></li>
<li><p><b>w</b> - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).</p></li>
<li><p><b>wx</b> - Like 'w' but fails if path exists.</p></li>
<li><p><b>w+</b> - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).</p></li>
<li><p><b>wx+</b> - Like 'w+' but fails if path exists.</p></li>
<li><p><b>a</b> - Open file for appending. The file is created if it does not exist.</p></li>
<li><p><b>ax</b> - Like 'a' but fails if path exists.</p></li>
<li><p><b>a+</b> - Open file for reading and appending. The file is created if it does not exist.</p></li>
<li><p><b>ax+'</b> - Like 'a+' but fails if path exists.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What are streams? </label>
<div class="toggle-content">
<p> Streams are objects that let you read data from a source or write data to a destination in continous fashion. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How many types of streams are present in Node. </label>
<div class="toggle-content">
<p>In Node.js, there are four types of streams.</p>
<ul class="list">
<li><p><b>Readable</b> - Stream which is used for read operation.</p></li>
<li><p><b>Writable</b> - Stream which is used for write operation.</p></li>
<li><p><b>Duplex</b> - Stream which can be used for both read and write operation.</p></li>
<li><p><b>Transform</b> - A type of duplex stream where the output is computed based on input.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> Name some of the events fired by streams. </label>
<div class="toggle-content">
<p>Each type of Stream is an <b>EventEmitter</b> instance and throws several events at different instance of times. For example, some of the commonly used events are:</p>
<ul class="list">
<li><p><b>data</b> - This event is fired when there is data is available to read.</p></li>
<li><p><b>end</b> - This event is fired when there is no more data to read.</p></li>
<li><p><b>error</b> - This event is fired when there is any error receiving or writing data.</p></li>
<li><p><b>finish</b> - This event is fired when all data has been flushed to underlying system</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is Chaining in Node? </label>
<div class="toggle-content">
<p>Chanining is a mechanism to connect output of one stream to another 
stream and create a chain of multiple stream operations. It is normally 
used with piping operations.</p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How will you open a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to open a file in asynchronous mode:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">fs</span><span class="pun">.</span><span class="pln">open</span><span class="pun">(</span><span class="pln">path</span><span class="pun">,</span><span class="pln"> flags</span><span class="pun">[,</span><span class="pln"> mode</span><span class="pun">],</span><span class="pln"> callback</span><span class="pun">)</span></pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> - This is string having file name including path.</p></li>
<li><p><b>flags</b> - Flag tells the behavior of the file to be opened. All possible values have been mentioned below.</p></li>
<li><p><b>mode</b> - This sets the file mode (permission and sticky 
bits), but only if the file was created. It defaults to 0666, readable 
and writeable.</p></li>
<li><p><b>callback</b> - This is the callback function which gets two arguments (err, fd).</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How will you read a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of one of the methods to read from a file:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">fs</span><span class="pun">.</span><span class="pln">read</span><span class="pun">(</span><span class="pln">fd</span><span class="pun">,</span><span class="pln"> buffer</span><span class="pun">,</span><span class="pln"> offset</span><span class="pun">,</span><span class="pln"> length</span><span class="pun">,</span><span class="pln"> position</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">)</span></pre>
<p>This method will use file descriptor to read the file, if you want to
 read file using file name directly then you should use another method 
available.</p>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list"><li><p><b>fd</b> - This is the file descriptor returned by file fs.open() method.</p></li>
<li><p><b>buffer</b> - This is the buffer that the data will be written to.</p></li>
<li><p><b>offset</b> - This is the offset in the buffer to start writing at.</p></li>
<li><p><b>length</b> - This is an integer specifying the number of bytes to read.</p></li>
<li><p><b>position</b> - This is an integer specifying where to begin 
reading from in the file. If position is null, data will be read from 
the current file position.</p></li>
<li><p><b>callback</b> - This is the callback function which gets the three arguments, (err, bytesRead, buffer).</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How will you write a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of one of the methods to write into a file:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">fs</span><span class="pun">.</span><span class="pln">writeFile</span><span class="pun">(</span><span class="pln">filename</span><span class="pun">,</span><span class="pln"> data</span><span class="pun">[,</span><span class="pln"> options</span><span class="pun">],</span><span class="pln"> callback</span><span class="pun">)</span></pre>
<p>This method will over-write the file if file already exists. If you 
want to write into an existing file then you should use another method 
available.</p>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> - This is string having file name including path.</p></li>
<li><p><b>data</b> - This is the String or Buffer to be written into the file.</p></li>
<li><p><b>options</b> - The third parameter is an object which will hold
 {encoding, mode, flag}. By default encoding is utf8, mode is octal 
value 0666 and flag is 'w'</p></li>
<li><p><b>callback</b> - This is the callback function which gets a single parameter err and used to to return error in case of any writing error.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How will you close a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of one of the methods to close an opened file:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">fs</span><span class="pun">.</span><span class="pln">close</span><span class="pun">(</span><span class="pln">fd</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">)</span></pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list"><li><p><b>fd</b> - This is the file descriptor returned by file fs.open() method.</p></li>
<li><p><b>callback</b> - This is the callback function which gets no arguments other than a possible exception are given to the completion callback.</p></li>
</ul>
</div>
</section>
<section class="toggle active">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How will you get information about a file using Node? </label>
<div class="toggle-content" style="display: block;">
<p>Following is the syntax of the method to get the information about a file:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">fs</span><span class="pun">.</span><span class="pln">stat</span><span class="pun">(</span><span class="pln">path</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">)</span></pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> - This is string having file name including path.</p></li>
<li><p><b>callback</b> - This is the callback function which gets two arguments (err, stats) where <b>stats</b> is an object of fs.Stats type which is printed below in the example.</p></li>
</ul>
</div>
</section>
<section class="toggle active">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How will you truncate a file using Node? </label>
<div class="toggle-content" style="display: block;">
<p>Following is the syntax of the method to truncate an opened file:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">fs</span><span class="pun">.</span><span class="pln">ftruncate</span><span class="pun">(</span><span class="pln">fd</span><span class="pun">,</span><span class="pln"> len</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">)</span></pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list"><li><p><b>fd</b> - This is the file descriptor returned by file fs.open() method.</p></li>
<li><p><b>len</b> - This is the length of the file after which file will be truncated.</p></li>
<li><p><b>callback</b> - This is the callback function which gets no arguments other than a possible exception are given to the completion callback.</p></li>
</ul>
</div>
</section>
<section class="toggle active">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How will you delete a file using Node? </label>
<div class="toggle-content" style="display: block;">
<p>Following is the syntax of the method to delete a file:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">fs</span><span class="pun">.</span><span class="pln">unlink</span><span class="pun">(</span><span class="pln">path</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">)</span></pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> - This is the file name including path.</p></li>
<li><p><b>callback</b> - This is the callback function which gets no arguments other than a possible exception are given to the completion callback.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How will you create a directory? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to create a directory:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">fs</span><span class="pun">.</span><span class="pln">mkdir</span><span class="pun">(</span><span class="pln">path</span><span class="pun">[,</span><span class="pln"> mode</span><span class="pun">],</span><span class="pln"> callback</span><span class="pun">)</span></pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> - This is the directory name including path.</p></li>
<li><p><b>mode</b> - This is the directory permission to be set. Defaults to 0777.</p></li>
<li><p><b>callback</b> - This is the callback function which gets no arguments other than a possible exception are given to the completion callback.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How will you delete a directory? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to remove a directory:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">fs</span><span class="pun">.</span><span class="pln">rmdir</span><span class="pun">(</span><span class="pln">path</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">)</span></pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> - This is the directory name including path.</p></li>
<li><p><b>callback</b> - This is the callback function which gets no arguments other than a possible exception are given to the completion callback.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> How will you read a directory? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to read a directory:</p>
<pre class="prettyprint notranslate prettyprinted" style=""><span class="pln">fs</span><span class="pun">.</span><span class="pln">readdir</span><span class="pun">(</span><span class="pln">path</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">)</span></pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> - This is the directory name including path.</p></li>
<li><p><b>callback</b> - This is the callback function which gets two 
arguments (err, files) where files is an array of the names of the files
 in the directory excluding '.' and '..'.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is the purpose of __filename variable? </label>
<div class="toggle-content">
<p> The __filename represents the filename of the code being executed. 
This is the resolved absolute path of this code file. For a main program
 this is not necessarily the same filename used in the command line. The
 value inside a module is the path to that module file. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is the purpose of __dirname variable? </label>
<div class="toggle-content">
<p> The __dirname represents the name of the directory that the currently executing script resides in. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is the purpose of setTimeout function? </label>
<div class="toggle-content">
<p> The setTimeout(cb, ms) global function is used to run callback cb 
after at least ms milliseconds. The actual delay depends on external 
factors like OS timer granularity and system load. A timer cannot span 
more than 24.8 days.</p>
<p>This function returns an opaque value that represents the timer which can be used to clear the timer. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is the purpose of clearTimeout function? </label>
<div class="toggle-content">
<p> The clearTimeout( t ) global function is used to stop a timer that 
was previously created with setTimeout(). Here t is the timer returned 
by setTimeout() function. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is the purpose of setInterval function? </label>
<div class="toggle-content">
<p> The setInterval(cb, ms) global function is used to run callback cb 
repeatedly after at least ms milliseconds. The actual delay depends on 
external factors like OS timer granularity and system load. A timer 
cannot span more than 24.8 days.</p>
<p>This function returns an opaque value that represents the timer which
 can be used to clear the timer using the function clearInterval(t). </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is the purpose of console object? </label>
<div class="toggle-content">
<p> console object is used to Used to print information on stdout and stderr. </p>
</div>
</section>
<section class="toggle">
<label><i class="icon icon-minus"></i><i class="icon icon-plus"></i> What is the purpose of process object? </label>
<div class="toggle-content">
<p> process object is used to get information on current process. Provides multiple events related to process activities. </p>
</div>
</section>
<h2>What is Next ?</h2>
<p>Further you can go through your past assignments you have done with 
the subject and make sure you are able to speak confidently on them. If 
you are fresher then interviewer does not expect you will answer very 
complex questions, rather you have to make your basics concepts very 
strong.</p>
<p>Second it really doesn't matter much if you could not answer few 
questions but it matters that whatever you answered, you must have 
answered with confidence. So just feel confident during your interview. 
We at tutorialspoint wish you best luck to have a good interviewer and 
all the very best for your future endeavor. Cheers :-)</p>
<hr>
<div class="pre-btn">
<a href="https://www.tutorialspoint.com/nodejs/nodejs_questions_answers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div><div class="print-btn">
<a href="https://www.tutorialspoint.com/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="pdf-btn">
<a href="https://www.tutorialspoint.com/nodejs/pdf/nodejs_interview_questions.pdf" title="Node.js Interview Questions" target="_blank"><i class="icon icon-file-pdf-o big-font"></i> PDF</a>
</div>
<div class="nxt-btn">
<a href="https://www.tutorialspoint.com/nodejs/nodejs_questions_answers.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<hr>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script type="text/javascript"><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="Node.js%20IQ%20tutorialpoint_files/show_ads.js">
</script><ins id="aswift_0_expand" style="display:inline-table;border:none;height:400px;margin:0;padding:0;position:relative;visibility:visible;width:580px;background-color:transparent;"><ins id="aswift_0_anchor" style="display:block;border:none;height:400px;margin:0;padding:0;position:relative;visibility:visible;width:580px;background-color:transparent;"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;width:580px;height:400px;" width="580" height="400" frameborder="0"></iframe></ins></ins>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<div class="simple-ad">
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.facebook.com/sharer.php?u=' + 'http://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="Node.js%20IQ%20tutorialpoint_files/facebookIcon.jpg" alt="img">
</a>
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://twitter.com/share?url=' + 'http://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="Node.js%20IQ%20tutorialpoint_files/twitterIcon.jpg" alt="img">
</a>
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.linkedin.com/cws/share?url=' + 'http://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="Node.js%20IQ%20tutorialpoint_files/linkedinIcon.jpg" alt="img">
</a>
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://plus.google.com/share?url=http://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm','sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="Node.js%20IQ%20tutorialpoint_files/googlePlusIcon.jpg" alt="img">
</a>
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://www.stumbleupon.com/submit?url=http://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=456,top='+sTop+',left='+sLeft);return false;">
<img src="Node.js%20IQ%20tutorialpoint_files/StumbleUponIcon.jpg" alt="img">
</a>
<a href="javascript:void(0)" onclick="var sTop = window.screen.height/2-(218); var sLeft = window.screen.width/2-(313);window.open('https://reddit.com/submit?url=http://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm&amp;title='+ document.title,'sharer','toolbar=0,status=0,width=626,height=656,top='+sTop+',left='+sLeft);return false;">
<img src="Node.js%20IQ%20tutorialpoint_files/reddit.jpg" alt="img">
</a>
</div>
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="Node.js%20IQ%20tutorialpoint_files/show_ads.js">
</script><ins id="aswift_2_expand" style="display:inline-table;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent;"><ins id="aswift_2_anchor" style="display:block;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent;"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;width:300px;height:250px;" width="300" height="250" frameborder="0"></iframe></ins></ins>
</div>
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="Node.js%20IQ%20tutorialpoint_files/show_ads.js">
</script><ins id="aswift_3_expand" style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent;"><ins id="aswift_3_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent;"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_3" name="aswift_3" style="left:0;position:absolute;top:0;width:300px;height:600px;" width="300" height="600" frameborder="0"></iframe></ins></ins>
</div>
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript" src="Node.js%20IQ%20tutorialpoint_files/show_ads.js">
</script><ins id="aswift_4_expand" style="display:inline-table;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent;"><ins id="aswift_4_anchor" style="display:block;border:none;height:250px;margin:0;padding:0;position:relative;visibility:visible;width:300px;background-color:transparent;"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_4" name="aswift_4" style="left:0;position:absolute;top:0;width:300px;height:250px;" width="300" height="250" frameborder="0"></iframe></ins></ins>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="https://www.tutorialspoint.com/index.htm" class="logo"> <img alt="Tutorials Point" class="img-responsive" src="Node.js%20IQ%20tutorialpoint_files/logo-footer.png"> </a>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <nav id="sub-menu">
      <ul>
         <li><a href="https://www.tutorialspoint.com/about/tutorials_writing.htm">Write for us</a></li>
         <li><a href="https://www.tutorialspoint.com/about/faq.htm">FAQ's</a></li>
         <li><a href="https://www.tutorialspoint.com/about/about_helping.htm">Helping</a></li>
         <li><a href="https://www.tutorialspoint.com/about/contact_us.htm">Contact</a></li>
      </ul>
   </nav>
</div>
<div class="col-md-3 col-sm-12 col-xs-12">
<p>© Copyright 2017. All Rights Reserved.</p>
</div>
<div class="col-md-4 col-sm-12 col-xs-12">
   <div class="news-group">
      <input class="form-control-foot search" name="textemail" id="textemail" autocomplete="off" placeholder="Enter email for newsletter" onfocus="if (this.value == 'Enter email for newsletter...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Enter email for newsletter...';}" type="text">
      <span class="input-group-btn"> <button class="btn btn-default btn-footer" id="btnemail" type="submit" onclick="javascript:void(0);">go</button> </span>
      <div id="newsresponse"></div>
   </div>
</div>
</div>
</div>
</div>
</div><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" style="display: none;" frameborder="0"></iframe><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" style="display: none;" frameborder="0"></iframe>
<!-- Libs -->
<script type="text/javascript" src="Node.js%20IQ%20tutorialpoint_files/custom-min.js"></script><a class="scroll-to-top visible" href="#" id="scrollToTop"><i class="icon icon-chevron-up icon-white"></i></a>
<script src="Node.js%20IQ%20tutorialpoint_files/urchin.js">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
<script type="text/javascript" src="Node.js%20IQ%20tutorialpoint_files/jquery.js"></script>
<script type="text/javascript">
   var tryit = new $.TryIt('/nodejs/try_nodejs.php');
   tryit.compile();
</script><div id="source" style="display:none;"></div><div id="supportsource" style="display:none;"></div><div id="utilsource" style="display:none;"></div><div id="extrasource" style="display:none;"></div><div id="inputs" style="display:none;"></div><div id="filename" style="display:none;"></div>
<script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": "Node.js Interview Questions",
    "name": "Node.js Interview Questions",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm"
    },
    "image": {
        "@type": "ImageObject",
        "url": "https://www.tutorialspoint.com/nodejs/images/nodejs-mini-logo.jpg",
        "width": 255,
        "height": 194
    },
    "author": {
        "@type": "Organization",
        "name": "Tutorials Point",
        "url": "https://www.tutorialspoint.com",
        "logo": {
            "@type": "ImageObject",
            "url": "https://www.tutorialspoint.com/images/logo60.png",
            "width": 210,
            "height": 60
        }
    },
    "datePublished": "July 23 2017 03:34:50.",
    "dateModified": "July 23 2017 03:34:50.",
    "publisher": {
        "@type": "Organization",
        "name": "Tutorials Point",
        "url": "https://www.tutorialspoint.com",
        "logo": {
            "@type": "ImageObject",
            "url": "https://www.tutorialspoint.com/images/logo60.png",
            "width": 210,
            "height": 60
        }
    },
    "description": "Dear readers, these Node.JS Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Node.JS. As per my experience good interviewers hardly plan to ask a..."
}
</script>
<script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
        {
            "@type": "ListItem",
            "position": 1,
            "item": {
                "name": "www.tutorialspoint.com",
                "@id": "https://www.tutorialspoint.com"
            }
        },
        {
            "@type": "ListItem",
            "position": 2,
            "item": {
                "name": "Nodejs",
                "@id": "https://www.tutorialspoint.com/nodejs"
            }
        },
        {
            "@type": "ListItem",
            "position": 3,
            "item": {
                "name": null
            }
        }
    ]
}
</script>



<iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" style="display: none;" frameborder="0"></iframe><div class="autocomplete-suggestions "></div><div id="cboxOverlay" style="display: none;"></div><div id="colorbox" class="" role="dialog" tabindex="-1" style="display: none;"><div id="cboxWrapper"><div><div id="cboxTopLeft" style="float: left;"></div><div id="cboxTopCenter" style="float: left;"></div><div id="cboxTopRight" style="float: left;"></div></div><div style="clear: left;"><div id="cboxMiddleLeft" style="float: left;"></div><div id="cboxContent" style="float: left;"><div id="cboxTitle" style="float: left;"></div><div id="cboxCurrent" style="float: left;"></div><button type="button" id="cboxPrevious"></button><button type="button" id="cboxNext"></button><button id="cboxSlideshow"></button><div id="cboxLoadingOverlay" style="float: left;"></div><div id="cboxLoadingGraphic" style="float: left;"></div></div><div id="cboxMiddleRight" style="float: left;"></div></div><div style="clear: left;"><div id="cboxBottomLeft" style="float: left;"></div><div id="cboxBottomCenter" style="float: left;"></div><div id="cboxBottomRight" style="float: left;"></div></div></div><div style="position: absolute; width: 9999px; visibility: hidden; display: none; max-width: none;"></div></div><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" style="display: none;" frameborder="0"></iframe><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" style="display: none;" frameborder="0"></iframe></body></html>